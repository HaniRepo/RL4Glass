# -*- coding: utf-8 -*-
"""DisturbParametersGobInit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vqDp-e65bwZRob1-JzAcfs8B9Vyv3yMM
"""

#The user may change this section if they prefer other IDE like VS code,...
#Here I am using the google colab and I am connecting to the google Drive where the simulation.py and Glassform.so are located
from google.colab import drive
drive.mount('/content/drive')

import sys
sys.path.append('/content/drive/My Drive/Colab_Notebooks/Git_versions')
import sys
import os

# Set the working directory
os.chdir('/content/drive/My Drive/Colab_Notebooks/Git_versions')

# test
#if anything is wrong(missing files, not connecting to Drive,..) we shall see the error after running this import
from simulator import GlassformSimulator

import csv
import matplotlib.pyplot as plt
import numpy as np
from simulator import GlassformSimulator  # Ensure simulator.py is in the current directory
from google.colab import files  # Only needed in Google Colab for downloading files

# Constants
CYCLE_LENGTH_S = 13.36  # Total cycle length in seconds
CONTACT_NOMINAL_DEG = 106  # Nominal contact time in degrees
COOLING_NOMINAL_DEG = 120  # Nominal cooling time in degrees
PROPORTION_SETTLE = 0.6  # Proportion of settle in contact
PROPORTION_COUNTER = 0.4  # Proportion of counter in contact
STEADY_WINDOW = 50  # Number of cycles for steady-state detection
SLOPE_THRESHOLD = 0.01  # Threshold for steady-state slope
COOLING_VARIATION = 0.10  # 10% variation for increased and decreased cooling

# Conversion functions
def degrees_to_seconds(degrees):
    """Convert machine degrees to seconds."""
    return (degrees / 360) * CYCLE_LENGTH_S

def seconds_to_degrees(time_s):
    """Convert seconds to machine degrees."""
    return (time_s / CYCLE_LENGTH_S) * 360

# Initialize the simulator
simulator = GlassformSimulator()

# File paths
file_path_steady = '/content/simulation_steady_log.csv'
file_path_experiments_cooling = '/content/simulation_experiments_cooling_log.csv'

# ====== Steady State Detection ======
with open(file_path_steady, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow([
        'Cycle', 'Time (s)', 'T_gob (Parison Temperature)', 'T_mold (Mold Temperature)',
        't_contact (°)', 't_cooling (°)'
    ])

    gob_temps = []
    mold_temps = []
    time_steps = []
    steady_cycle = None

    simulator.reset(T_mold=400.5)
    simulator.T_gob = 1100
    simulator.T_air = 50
    simulator.t_settle = degrees_to_seconds(PROPORTION_SETTLE * CONTACT_NOMINAL_DEG)
    simulator.t_counter = degrees_to_seconds(PROPORTION_COUNTER * CONTACT_NOMINAL_DEG)
    simulator.t_cooling = degrees_to_seconds(COOLING_NOMINAL_DEG)

    for i in range(1000):  # Simulate for up to 1000 cycles
        simulator.simulate_cycle()
        gob_temp = simulator.T_parison
        mold_temp = simulator.T_mold
        time_step = simulator.time

        # Calculate t_contact and t_cooling in degrees
        t_contact_deg = seconds_to_degrees(simulator.t_settle) + seconds_to_degrees(simulator.t_counter)
        t_cooling_deg = seconds_to_degrees(simulator.t_cooling)

        # Log data
        writer.writerow([i, time_step, gob_temp, mold_temp, t_contact_deg, t_cooling_deg])

        # Store results
        gob_temps.append(gob_temp)
        mold_temps.append(mold_temp)
        time_steps.append(time_step)

        # Check steady state only after enough cycles for the window
        if i >= STEADY_WINDOW:
            recent_temps = gob_temps[-STEADY_WINDOW:]  # Last `STEADY_WINDOW` cycles
            slope = (recent_temps[-1] - recent_temps[0]) / STEADY_WINDOW

            if abs(slope) <= SLOPE_THRESHOLD:  # Check if slope is within the threshold
                steady_cycle = i
                print(f"Steady state reached at cycle {steady_cycle}")
                break

if steady_cycle is None:
    print("Steady state not reached within the simulation time.")
else:
    steady_mold_temp = mold_temps[steady_cycle]
    steady_gob_temp = gob_temps[steady_cycle]
    steady_t_contact = seconds_to_degrees(simulator.t_settle) + seconds_to_degrees(simulator.t_counter)
    steady_t_cooling = seconds_to_degrees(simulator.t_cooling)
    print("\nSteady State Information:")
    print(f"Steady Point Cycle: {steady_cycle}")
    print(f"Steady Mold Temperature: {steady_mold_temp:.2f}°C")
    print(f"Steady Gob Temperature: {steady_gob_temp:.2f}°C")
    print(f"Steady t_contact: {steady_t_contact:.2f}°")
    print(f"Steady t_cooling: {steady_t_cooling:.2f}°")

files.download(file_path_steady)
# File path for the new log
file_path_perturbations = '/content/simulation_perturbations_log.csv'

# Define perturbation scenarios for initial T_gob
perturbations = [
    {"label": "Baseline", "T_gob_initial": 1100},
    {"label": "+5 Initial T_gob", "T_gob_initial": 1105},
    {"label": "-5 Initial T_gob", "T_gob_initial": 1095},
]

# Open the CSV file to log the data
with open(file_path_perturbations, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow([
        'Scenario', 'Cycle', 'Time (s)', 'T_parison (°C)', 'T_mold (°C)',
        'Initial T_gob (°C)', 'T_air (°C)'
    ])

    # Store results for plotting
    results = {}

    for perturbation in perturbations:
        label = perturbation["label"]
        T_gob_initial = perturbation["T_gob_initial"]
        T_air = 50  # Fixed for this experiment

        # Reset simulator with steady-state conditions
        simulator.reset(T_mold=steady_mold_temp)
        simulator.T_gob = T_gob_initial  # Adjusted initial T_gob
        simulator.T_air = T_air
        simulator.t_settle = degrees_to_seconds(PROPORTION_SETTLE * CONTACT_NOMINAL_DEG)
        simulator.t_counter = degrees_to_seconds(PROPORTION_COUNTER * CONTACT_NOMINAL_DEG)
        simulator.t_cooling = degrees_to_seconds(COOLING_NOMINAL_DEG)

        parison_temps = [steady_gob_temp]  # Include steady-state T_parison
        mold_temps = [steady_mold_temp]  # Include steady-state T_mold
        time_steps = [0]  # Start from time 0
        initial_gob_temps = [T_gob_initial]  # Record initial T_gob for each cycle

        for i in range(1, 101):  # Simulate 100 cycles
            simulator.simulate_cycle()
            parison_temp = simulator.T_parison
            mold_temp = simulator.T_mold
            time_step = simulator.time

            # Log data
            writer.writerow([label, i, time_step, parison_temp, mold_temp, T_gob_initial, T_air])

            # Append the results to lists for plotting
            parison_temps.append(parison_temp)
            mold_temps.append(mold_temp)
            time_steps.append(time_step)
            initial_gob_temps.append(T_gob_initial)

        # Store results for this perturbation
        results[label] = {
            "time": time_steps,
            "parison_temp": parison_temps,
            "mold_temp": mold_temps,
            "initial_gob_temp": T_gob_initial,
        }

# Plot Parison Temperatures
plt.figure(figsize=(10, 6))
for label, data in results.items():
    plt.plot(
        data["time"], data["parison_temp"],
        label=f"{label} (Initial T_gob: {data['initial_gob_temp']}°C)"
    )
plt.xlabel("Simulation Time (s)")
plt.ylabel("Parison Temperature (°C)")
plt.title("Effect of Initial T_gob Perturbations on Parison Temperature")
plt.legend()
plt.grid(True)
plt.show()

# Plot Mold Temperatures
plt.figure(figsize=(10, 6))
for label, data in results.items():
    plt.plot(
        data["time"], data["mold_temp"],
        label=f"{label} (Initial T_gob: {data['initial_gob_temp']}°C)"
    )
plt.xlabel("Simulation Time (s)")
plt.ylabel("Mold Temperature (°C)")
plt.title("Effect of Initial T_gob Perturbations on Mold Temperature")
plt.legend()
plt.grid(True)
plt.show()

# Download the CSV log file
print(f"\nResults have been saved in the CSV file: {file_path_perturbations}")
files.download(file_path_perturbations)